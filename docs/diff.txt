diff --git a/README.md b/README.md
index d3b7d1a..09fa9a1 100644
--- a/README.md
+++ b/README.md
@@ -26,17 +26,31 @@
 ## üìÇ Project Structure
 
 ```
-
 /src
-‚îú‚îÄ‚îÄ bot.js             # Bot flow, state management, message handling
-‚îú‚îÄ‚îÄ notes.js           # Note normalization, chromatic mapping, enharmonic spelling
-‚îú‚îÄ‚îÄ intervals.js       # Semitone definitions for scale degrees
-‚îú‚îÄ‚îÄ chordFormulas.js   # Chord templates (maj7, m7, 7, m7b5, dim7)
-‚îú‚îÄ‚îÄ chord.js           # Chord class: parsing, note generation, formatting
-‚îî‚îÄ‚îÄ improvisation.js   # Logic for deriving improvisation chords
+‚îú‚îÄ‚îÄ bot.js                # Entry point: initializes bot, routes commands and callbacks
+‚îú‚îÄ‚îÄ chord.js              # Chord class: parsing, note generation, formatting
+‚îú‚îÄ‚îÄ chordFormulas.js      # Chord templates (maj7, m7, 7, m7b5, dim7)
+‚îú‚îÄ‚îÄ improvisation.js      # Logic for deriving improvisation chords
+‚îú‚îÄ‚îÄ intervals.js          # Semitone definitions for scale degrees
+‚îú‚îÄ‚îÄ keyboards.js          # Inline keyboard layout generators (root, type, accidentals)
+‚îú‚îÄ‚îÄ notes.js              # Note normalization, chromatic mapping, enharmonic spelling
+‚îú‚îÄ‚îÄ session.js            # Per-chat state management and session timeout
+‚îú‚îÄ‚îÄ handlers/
+‚îÇ   ‚îú‚îÄ‚îÄ commands.js       # /start, /help, /cancel command handlers
+‚îÇ   ‚îú‚îÄ‚îÄ callbacks.js      # Routes callback_query actions to step handlers
+‚îÇ   ‚îî‚îÄ‚îÄ flow/
+‚îÇ       ‚îú‚îÄ‚îÄ backNavigation.js   # Handles back:root and back:type navigation
+‚îÇ       ‚îú‚îÄ‚îÄ handleAccidental.js # Final step: computes and shows result
+‚îÇ       ‚îú‚îÄ‚îÄ handleRoot.js       # Handles root note selection
+‚îÇ       ‚îú‚îÄ‚îÄ handleType.js       # Handles chord type selection
+‚îÇ       ‚îî‚îÄ‚îÄ quickActions.js     # restart, show_help, quick_cancel
 
 /tests
-‚îî‚îÄ‚îÄ \*.test.js          # Jest test suites for each module
+‚îî‚îÄ‚îÄ *.test.js            # Jest test suites for each module
+
+/docs
+‚îú‚îÄ‚îÄ app_flow.md          # Descri√ß√£o do fluxo da aplica√ß√£o (em portugu√™s)
+‚îî‚îÄ‚îÄ code_flow.md         # Explica√ß√£o t√©cnica do fluxo do c√≥digo (em portugu√™s)
 
 ```
 
diff --git a/TODO.md b/TODO.md
index 81c1592..0050bb5 100644
--- a/TODO.md
+++ b/TODO.md
@@ -19,5 +19,6 @@ This document outlines planned enhancements to improve the overall user interfac
 | 7  | Simple internationalization (üá∫üá∏ / üáßüá∑) using a dictionary map       | Language adapts without touching logic code                       |
 | 8  | Support typed ‚Äúb‚Äù or ‚Äú#‚Äù as accidentals                             | Improves accessibility, especially for desktop keyboard users     |
 | 9  | Encapsulate UI steps in named functions (e.g., `sendStart()`)      | Cleaner structure, easier to update or localize UI behavior       |
+| 10 | Translate and revise `/docs/*.md` to English                      | Ensures consistency with codebase and supports international users |
 
 ---
diff --git a/src/bot.js b/src/bot.js
index 62d3204..2f01f43 100644
--- a/src/bot.js
+++ b/src/bot.js
@@ -1,3 +1,4 @@
+
 /**
  * Copyright 2025 Jeanco Volfe
  * Licensed under the Apache License, Version 2.0
@@ -8,12 +9,11 @@
 
 require('dotenv').config();
 const TelegramBot = require('node-telegram-bot-api');
-const { Chord } = require('./chord');
-const { getImprovisationChord } = require('./improvisation');
-const pad = (str, len = 18) =>
-  str.length >= len ? str : str + ' '.repeat(len - str.length)
 
-// Initializes the bot using the token from .env or fake_token
+const { state, resetTimeout } = require('./session');
+const { handleStart, handleHelp, handleCancel } = require('./handlers/commands');
+const { handleCallback } = require('./handlers/callbacks');
+
 const token = process.env.TELEGRAM_TOKEN;
 if (!token) {
   console.error('‚ö†Ô∏è  Define the TELEGRAM_TOKEN variable in the .env file');
@@ -21,308 +21,23 @@ if (!token) {
 }
 
 const isFakeToken = token === 'fake-token';
-
-// S√≥ ativa o polling se o token for real
 const bot = new TelegramBot(token, { polling: !isFakeToken });
 
 if (isFakeToken) {
-  console.warn('‚ö†Ô∏è  Rodando com token falso. Polling desativado para evitar erro 404.');
+  console.warn('‚ö†Ô∏è  Running with fake token. Polling disabled to avoid 404 error.');
 }
 
 console.log('ü§ñ Bot successfully started. Awaiting commands...');
 
-// In-memory state per chatId
-const state = {};
-
-const ROOTS = ['C', 'D', 'E', 'F', 'G', 'A', 'B']
-const TYPES = [
-  { text: 'Major', callback_data: 'type:maj7' },
-  { text: 'Minor', callback_data: 'type:m7' },
-  { text: 'Dominant', callback_data: 'type:7' },
-  { text: 'Half-dim.', callback_data: 'type:m7b5' },
-  { text: 'Diminished', callback_data: 'type:dim7' }
-]
-const ACCS = [
-  { text: '‚ôÆ', callback_data: 'acc:' },
-  { text: '‚ô≠', callback_data: 'acc:b' },
-  { text: '‚ôØ', callback_data: 'acc:#' },
-]
-
-function twoColumn(buttons) {
-  const keyboard = []
-  for (let i = 0; i < buttons.length; i += 2) {
-    const row = [buttons[i]]
-    if (buttons[i + 1]) row.push(buttons[i + 1])
-    keyboard.push(row)
-  }
-  return keyboard
-}
-
-const SESSION_TTL_MS = 5 * 60 * 1000 // 5 minutes
-
-function resetTimeout(chatId) {
-  if (state[chatId]?.timer) clearTimeout(state[chatId].timer)
-  state[chatId].timer = setTimeout(() => {
-    if (state[chatId]) {
-      delete state[chatId]
-      bot.sendMessage(chatId, '‚åõ Session expired. Use /start to begin again.')
-    }
-  }, SESSION_TTL_MS)
-}
-
-// 1Ô∏è‚É£ /start command
-bot.onText(/\/start/, async (msg) => {
-  const chatId = msg.chat.id
-  state[chatId] = { step: 'root' }
-
-  const rootKeyboard = twoColumn(
-    ROOTS.map(r => ({ text: r, callback_data: `root:${r}` }))
-  )
-  const quickRow = [
-    { text: 'üìñ Help',   callback_data: 'show_help' },
-    { text: '‚ùå Cancel', callback_data: 'quick_cancel' }
-  ]
+// Commands
+bot.onText(/\/start/, (msg) => handleStart(bot, msg, state, resetTimeout))
+bot.onText(/\/help/,  (msg) => handleHelp(bot, msg))
+bot.onText(/\/cancel/, (msg) => handleCancel(bot, msg, state))
 
-  const text =
-    'üé∑ *Welcome to Jazz Impro Bot!*\n\n' +
-    '*Quick actions*\n' +
-    'üìñ Help ‚Äì instructions\n' +
-    '‚ùå Cancel ‚Äì end session\n\n' +
-    'üëá *Choose a root note to jam*'
-
-  // save the returned message id
-  const sent = await bot.sendMessage(chatId, text, {
-    parse_mode: 'Markdown',
-    reply_markup: { inline_keyboard: [quickRow, ...rootKeyboard] }
-  })
-  state[chatId].msgId = sent.message_id
-  resetTimeout(chatId)
-})
-
-// 2Ô∏è‚É£ /help command
-bot.onText(/\/help/, (msg) => {
-  const chatId = msg.chat.id
-  const text =
-    '*How to jam with Jazz Impro Bot* üé∂\n' +
-    '1. Send /start and pick a root note.\n' +
-    '2. Choose the chord quality and an accidental if needed.\n' +
-    "3. I'll suggest a chord a fifth above to inspire your solo.\n\n" +
-    'Use /cancel to stop and /start to begin again.'
-  bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
-})
-
-// 3Ô∏è‚É£ /cancel command
-bot.onText(/\/cancel/, (msg) => {
-  const chatId = msg.chat.id
-  if (state[chatId]) {
-    if (state[chatId].timer) clearTimeout(state[chatId].timer)
-    delete state[chatId]
-    bot.sendMessage(
-      chatId,
-      "üö´ Session cancelled. Use /start when you're ready to jam again."
-    )
-  } else {
-    bot.sendMessage(chatId, 'No active session. Use /start to begin.')
-  }
-  })
-
-// Unknown command handler
+// Unknown command
 bot.onText(/^\/(?!start|help|cancel).+/, (msg) => {
-  const chatId = msg.chat.id
-  bot.sendMessage(chatId, "ü§î I don't recognize that command. Try /help.")
+  bot.sendMessage(msg.chat.id, "ü§î I don't recognize that command. Try /help.")
 })
 
-// 2Ô∏è‚É£ Handles button interactions
-bot.on('callback_query', async (query) => {
-  const chatId = query.message.chat.id
-  const messageId = query.message.message_id
-  const [step, value] = query.data.split(':')
-
-  await bot.answerCallbackQuery(query.id)
-
-  if (query.data === 'restart') {
-    state[chatId] = { step: 'root', msgId: messageId }
-    resetTimeout(chatId)
-
-    const rootKB = twoColumn(
-      ROOTS.map(r => ({ text: r, callback_data: `root:${r}` }))
-    )
-    const quickRow = [
-      { text: 'üìñ Help',   callback_data: 'show_help' },
-      { text: '‚ùå Cancel', callback_data: 'quick_cancel' }
-    ]
-
-    await bot.editMessageText(
-      '*Choose a root note to jam*',
-      {
-        chat_id: chatId,
-        message_id: messageId,
-        parse_mode: 'Markdown',
-        reply_markup: { inline_keyboard: [quickRow, ...rootKB] }
-      }
-    )
-    return
-  } 
-
-  if (query.data === 'back:root') {
-  state[chatId] = { step: 'root', msgId: state[chatId].msgId }
-
-    const kb = twoColumn(
-      ROOTS.map(r => ({ text: r, callback_data: `root:${r}` }))
-    )
-
-    await bot.editMessageText(
-      '*Choose a root note to jam*',
-      {
-        chat_id: chatId,
-        message_id: state[chatId].msgId,
-        parse_mode: 'Markdown',
-        reply_markup: { inline_keyboard: kb }
-      }
-    )
-    return
-  }
-
-  if (query.data === 'back:type') {
-    state[chatId].step = 'type'
-
-    const kb = [
-      [{ text: '‚¨ÖÔ∏è Back', callback_data: 'back:root' }],
-      ...TYPES.map(t => [t])
-    ]
-
-    await bot.editMessageText(
-      `Root note *${state[chatId].root}* chosen! ‚úÖ\nChoose the chord quality:`,
-      {
-        chat_id: chatId,
-        message_id: state[chatId].msgId,
-        parse_mode: 'Markdown',
-        reply_markup: { inline_keyboard: kb }
-      }
-    )
-    return
-  }
-
-     // üîî Help button
-    if (query.data === 'show_help') {
-     bot.sendMessage(
-       chatId,
-       '*How to jam with Jazz Impro Bot* üé∂\n' +
-         '1. Send /start and pick a root note.\n' +
-         '2. Choose chord quality and accidental.\n' +
-         '3. I‚Äôll suggest an improvisation chord.\n\n' +
-         'Use /cancel (ou bot√£o Cancelar) para parar.',
-       { parse_mode: 'Markdown' }
-     )
-     return
-   }
- 
-   // üîî Cancel button
-  if (query.data === 'quick_cancel') {
-    if (state[chatId]?.timer) clearTimeout(state[chatId].timer)
-    delete state[chatId]
-    bot.sendMessage(chatId, '‚ùå Sess√£o cancelada. Use /start para recome√ßar.')
-    return
-  }
-
-  if (!state[chatId]) {
-    bot.sendMessage(chatId, '‚ö†Ô∏è Session expired. Send /start to begin again.')
-    return
-  }
-
-  try {
-    if (step === 'root' && state[chatId].step === 'root') {
-      state[chatId].root = value
-      state[chatId].step = 'type'
-      resetTimeout(chatId);
-
-      const kb = [
-        [{ text: '‚¨ÖÔ∏è Back', callback_data: 'back:root' }],
-        ...TYPES.map(t => [t])
-      ]
-
-      await bot.editMessageText(
-        `Root note *${value}* chosen! ‚úÖ\nChoose the chord quality:`,
-        {
-          chat_id: chatId,
-          message_id: state[chatId].msgId,
-          parse_mode: 'Markdown',
-          reply_markup: { inline_keyboard: kb }
-        }
-      )
-      return
-    }
-
-    if (step === 'type' && state[chatId].step === 'type') {
-      state[chatId].type = value
-      state[chatId].step = 'acc'
-      resetTimeout(chatId);
-
-      const kb = [
-        [{ text: '‚¨ÖÔ∏è Back', callback_data: 'back:type' }],
-        ...ACCS.map(a => [a])
-      ]
-
-      await bot.editMessageText(
-        `Quality *${value}* selected! ‚úÖ\nAdd an accidental if needed:`,
-        {
-          chat_id: chatId,
-          message_id: state[chatId].msgId,
-          parse_mode: 'Markdown',
-          reply_markup: { inline_keyboard: kb }
-        }
-      )
-      return
-    }
-
-    if (step === 'acc' && state[chatId].step === 'acc') {
-      await bot.editMessageText(
-        `Accidental *${value || 'none'}* set! ‚úÖ\n\nCalculating‚Ä¶`,
-        {
-          chat_id: chatId,
-          message_id: state[chatId].msgId,
-          parse_mode: 'Markdown',
-        }
-      )
-      //Typing message
-      await bot.sendChatAction(chatId, 'typing')
-      await new Promise(resolve => setTimeout(resolve, 700))   
-
-      const { root, type } = state[chatId]
-      const fullChord = `${root}${value}${type.replace(/^b/, '')}`
-      // Chord Objects
-      const chord       = Chord.parse(fullChord)
-      const improvChord = getImprovisationChord(chord)
-
-       /* // Option use toString() only
-      const baseLabel   = chord.toString()
-      const improvLabel = improvChord.toString()
-      */
-      // Option B ‚Äì symbol + notes
-      const baseLabel   = `${chord.toString().split(':')[0]} (${chord.getNotes().join(' ')})`
-      const improvLabel = `${improvChord.toString().split(':')[0]} (${improvChord.getNotes().join(' ')})`
-      
-      // ---------------------------------------------------------------
-      const pad = (str, len = 25) => (str.length >= len ? str : str + ' '.repeat(len - str.length))
-
-      const htmlResult =
-        'üéº <b>Resultado</b>\n' +
-        '<pre>' +
-        `${pad('Base chord')} | ${baseLabel}\n` +
-        `${pad('Improv. chord')} | ${improvLabel}\n` +
-        '</pre>'
-
-      await bot.editMessageText(htmlResult, {
-      chat_id: chatId,
-      message_id: state[chatId].msgId,
-      parse_mode: 'HTML',
-      reply_markup: { inline_keyboard: [[{ text: 'üîÅ New Chord', callback_data: 'restart' }]] }
-    })
-      if (state[chatId]?.timer) clearTimeout(state[chatId].timer);
-      delete state[chatId]
-    }
-  } catch (err) {
-    console.error(err)
-    bot.sendMessage(chatId, '‚ö†Ô∏è Something went wrong. Please try again later.')
-  }
-})
+// Callback queries
+bot.on('callback_query', (query) => handleCallback(query, bot, state, resetTimeout))
